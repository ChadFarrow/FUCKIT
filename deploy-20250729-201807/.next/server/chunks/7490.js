"use strict";exports.id=7490,exports.ids=[7490],exports.modules={37490:(a,b,c)=>{c.d(b,{K:()=>h});var d=c(29928);let e="verbose"===process.env.NEXT_PUBLIC_LOG_LEVEL,f=(...a)=>{},g=(...a)=>{e&&console.log(...a)};class h{static{this.logger=(0,d.vf)("RSSParser")}static async parseAlbumFeed(a){return(0,d.bD)(async()=>{let b,e,h;g("[RSSParser] Parsing RSS feed",{feedUrl:a});try{b=await fetch(a)}catch(b){throw new d.uV("Failed to fetch RSS feed",d.tG.RSS_FETCH_ERROR,500,!0,{feedUrl:a,error:b})}if(!b.ok){if(429===b.status)throw new d.uV("Rate limited while fetching RSS feed",d.tG.RATE_LIMIT_ERROR,429,!0,{feedUrl:a,status:b.status});throw new d.uV(`Failed to fetch RSS feed: ${b.status}`,d.tG.RSS_FETCH_ERROR,b.status,b.status>=500,{feedUrl:a,status:b.status})}let i=await b.text();if(!i||0===i.trim().length)throw new d.uV("Empty response from RSS feed",d.tG.RSS_INVALID_FORMAT,400,!1,{feedUrl:a});if(!i.includes("<")||!i.includes(">"))throw this.logger.error("Invalid XML response",null,{feedUrl:a,responsePreview:i.substring(0,200)}),new d.uV("Response is not valid XML",d.tG.RSS_INVALID_FORMAT,400,!1,{feedUrl:a});try{{let{DOMParser:a}=await c.e(8821).then(c.t.bind(c,8821,19));e=new a().parseFromString(i,"text/xml")}let b=e.getElementsByTagName("parsererror")[0];if(b)throw new d.uV("Invalid XML format in RSS feed",d.tG.RSS_PARSE_ERROR,400,!1,{feedUrl:a,parserError:b.textContent})}catch(b){if(b instanceof d.uV)throw b;throw new d.uV("Failed to parse XML content",d.tG.RSS_PARSE_ERROR,400,!1,{feedUrl:a,error:b})}let j=e.getElementsByTagName("channel");if(!j||0===j.length)throw new d.uV("Invalid RSS feed: no channel found",d.tG.RSS_INVALID_FORMAT,400,!1,{feedUrl:a});let k=j[0],l=k.getElementsByTagName("title")[0],m=l?.textContent?.trim()||"Unknown Album",n=k.getElementsByTagName("description")[0],o=n?.textContent?.trim()||"",p=k.getElementsByTagName("link")[0],q=p?.textContent?.trim()||"",r=a=>{if(a)return a.replace(/<[^>]*>/g,"").replace(/&nbsp;/g," ").replace(/&amp;/g,"&").replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&quot;/g,'"').replace(/&#39;/g,"'").trim()},s="Unknown Artist",t=k.getElementsByTagName("itunes:author"),u=t.length>0?t[0]:k.getElementsByTagName("author")[0];if(u)s=u.textContent?.trim()||s;else{let a=m.split(" - ");a.length>1&&(s=a[0].trim())}let v=e.getElementsByTagName("item"),w=null,x=k.getElementsByTagName("itunes:image")[0]||null;if(x||(x=k.querySelector("itunes\\:image")),x&&(w=x.getAttribute("href")||null),!w){let a=k.querySelector("image url");a&&(w=a.textContent?.trim()||null)}if(!w&&v.length>0){let a=v[0].getElementsByTagName("itunes:image")[0];a&&(w=a.getAttribute("href")||null)}if(w)try{let a=new URL(w);(a.href.includes("javascript:")||a.href.includes("data:"))&&(console.warn("Potentially unsafe cover art URL detected:",w),w=null)}catch(a){w&&!w.startsWith("http")&&(g("Invalid cover art URL format:",w),w=null)}let y=k.getElementsByTagName("itunes:subtitle")[0]?.textContent?.trim(),z=k.getElementsByTagName("itunes:summary")[0]?.textContent?.trim(),A=k.getElementsByTagName("language")[0],B=A?.textContent?.trim(),C=k.getElementsByTagName("copyright")[0],D=C?.textContent?.trim(),E=k.getElementsByTagName("itunes:explicit")[0],F=E?.textContent?.trim().toLowerCase()==="true",G=k.getElementsByTagName("itunes:keywords")[0],H=G?.textContent?.trim().split(",").map(a=>a.trim()).filter(a=>a)||[],I=Array.from(k.getElementsByTagName("itunes:category")).map(a=>a.getAttribute("text")).filter(Boolean),J=k.getElementsByTagName("itunes:owner")[0],K=J?{name:J.getElementsByTagName("itunes:name")[0]?.textContent?.trim(),email:J.getElementsByTagName("itunes:email")[0]?.textContent?.trim()}:void 0,L=[];(v.length>10||0===v.length)&&f(`🎵 Found ${v.length} items in RSS feed`);for(let a=0;a<v.length;a++){let b,c=v[a],d=c.getElementsByTagName("title")[0]?.textContent?.trim()||`Track ${a+1}`,e="0:00",f=c.getElementsByTagName("itunes:duration")[0],h=c.getElementsByTagName("duration")[0];if(f?.textContent?.trim()?e=f.textContent.trim():h?.textContent?.trim()&&(e=h.textContent.trim()),e&&""!==e.trim()){let a=e.trim();if(/^\d+$/.test(a)){let b=parseInt(a);if(!isNaN(b)&&b>0){let a=Math.floor(b/60),c=b%60;e=`${a}:${c.toString().padStart(2,"0")}`}else e="0:00",g(`⚠️ Invalid duration seconds "${a}" for track "${d}", using default`)}else if(a.includes(":")){let b=a.split(":");if(2===b.length){let c=parseInt(b[0]),f=parseInt(b[1]);!isNaN(c)&&!isNaN(f)&&c>=0&&f>=0&&f<60?e=`${c}:${f.toString().padStart(2,"0")}`:(e="0:00",g(`⚠️ Invalid MM:SS duration "${a}" for track "${d}", using default`))}else if(3===b.length){let c=parseInt(b[0]),f=parseInt(b[1]),h=parseInt(b[2]);if(!isNaN(c)&&!isNaN(f)&&!isNaN(h)&&c>=0&&f>=0&&f<60&&h>=0&&h<60){let a=60*c+f,b=e;e=`${a}:${h.toString().padStart(2,"0")}`,c>0&&g(`🔄 Converted HH:MM:SS "${b}" to MM:SS "${e}" for "${d}"`)}else e="0:00",g(`⚠️ Invalid HH:MM:SS duration "${a}" for track "${d}", using default`)}else e="0:00",g(`⚠️ Unknown duration format "${a}" for track "${d}", using default`)}else e="0:00",g(`⚠️ Cannot parse duration "${a}" for track "${d}", using default`)}else e="0:00",g(`⚠️ No duration found for track "${d}", using default`);e.includes("NaN")&&(e="0:00",g(`⚠️ Duration contained NaN for track "${d}", using default`));let i=c.getElementsByTagName("enclosure")[0];if(i&&(b=i.getAttribute("url")||void 0),!b){let a=c.getElementsByTagName("link")[0];a&&(b=a.textContent?.trim()||void 0)}if(!b){let a=c.getElementsByTagName("media:content")[0];a&&(b=a.getAttribute("url")||void 0)}let j=c.getElementsByTagName("itunes:subtitle")[0]?.textContent?.trim(),k=c.getElementsByTagName("itunes:summary")[0]?.textContent?.trim(),l=a=>{if(a)return a.replace(/<[^>]*>/g,"").replace(/&nbsp;/g," ").replace(/&amp;/g,"&").replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&quot;/g,'"').replace(/&#39;/g,"'").trim()},m=c.getElementsByTagName("itunes:image")[0],n=m?.getAttribute("href")||m?.getAttribute("url"),o=c.getElementsByTagName("itunes:explicit")[0],p=o?.textContent?.trim().toLowerCase()==="true",q=c.getElementsByTagName("itunes:keywords")[0],r=q?.textContent?.trim().split(",").map(a=>a.trim()).filter(a=>a)||[];L.push({title:d,duration:e,url:b,trackNumber:a+1,subtitle:l(j),summary:l(k),image:n||void 0,explicit:p,keywords:r.length>0?r:void 0}),b||g(`⚠️ Track missing URL: "${d}" (${e})`)}let M=k.getElementsByTagName("pubDate")[0]||k.getElementsByTagName("lastBuildDate")[0],N=M?.textContent?.trim()||new Date().toISOString(),O=[];[...Array.from(k.getElementsByTagName("podcast:funding")),...Array.from(k.getElementsByTagName("funding"))].forEach(a=>{let b=a.getAttribute("url")||a.textContent?.trim(),c=a.textContent?.trim()||a.getAttribute("message");b&&O.push({url:b,message:c||void 0})});let P=[];[...Array.from(k.getElementsByTagName("podcast:podroll")),...Array.from(k.getElementsByTagName("podroll"))].forEach(a=>{[...Array.from(a.getElementsByTagName("podcast:remoteItem")),...Array.from(a.getElementsByTagName("remoteItem"))].forEach(a=>{let b=a.getAttribute("feedUrl"),c=a.getAttribute("feedGuid"),d=a.getAttribute("title")||a.textContent?.trim(),e=a.getAttribute("description");b&&P.push({url:b,title:d||`Feed ${c?c.substring(0,8)+"...":"Unknown"}`,description:e||void 0})});let b=a.getAttribute("url"),c=a.getAttribute("title")||a.textContent?.trim(),d=a.getAttribute("description");b&&P.push({url:b,title:c||void 0,description:d||void 0})});let Q=Array.from(k.getElementsByTagName("podcast:remoteItem")).find(a=>"publisher"===a.getAttribute("medium"));if(Q){let a=Q.getAttribute("feedGuid"),b=Q.getAttribute("feedUrl"),c=Q.getAttribute("medium");a&&b&&c&&(h={feedGuid:a,feedUrl:b,medium:c})}let R={title:m,artist:s,description:r(o)||"",coverArt:w,tracks:L,releaseDate:N,link:q,funding:O.length>0?O:void 0,subtitle:r(y),summary:r(z),keywords:H.length>0?H:void 0,categories:I.length>0?I:void 0,explicit:F,language:B,copyright:D,owner:K&&(K.name||K.email)?K:void 0,podroll:P.length>0?P:void 0,publisher:h};return g("[RSSParser] Successfully parsed RSS feed",{feedUrl:a,trackCount:L.length}),R},{maxRetries:3,delay:1e3,onRetry:(b,c)=>{this.logger.warn(`Retrying RSS feed parse (attempt ${b})`,{feedUrl:a,error:c})}}).catch(b=>(this.logger.error("Failed to parse RSS feed after retries",b,{feedUrl:a}),null))}static async parseMultipleFeeds(a){a.length>5&&f(`🔄 Parsing ${a.length} RSS feeds...`);let b=[];for(let c=0;c<a.length;c+=20){let e=a.slice(c,c+20);a.length>10&&f(`📦 Processing batch ${Math.floor(c/20)+1}/${Math.ceil(a.length/20)} (${e.length} feeds)`);let g=e.map(async a=>{try{return await (0,d.bD)(()=>this.parseAlbumFeed(a),{maxRetries:2,delay:1e3,onRetry:(b,c)=>{this.logger.warn(`Retrying feed parse (attempt ${b})`,{url:a,error:c})}})}catch(b){if(b instanceof TypeError&&b.message.includes("NetworkError"))return console.error(`❌ NetworkError when attempting to fetch resource.`),console.log("\uD83D\uDD0D Error details:",{message:b.message,stack:b.stack,feedUrl:a}),null;return console.error(`❌ Failed to parse feed ${a} after retries:`,b),null}}),h=await Promise.allSettled(g),i=h.filter(a=>"fulfilled"===a.status&&null!==a.value),j=h.filter(a=>"rejected"===a.status||null===a.value);j.length>0&&a.length>10&&(console.warn(`⚠️ Failed to parse ${j.length} feeds in batch ${Math.floor(c/20)+1}`),j.slice(0,2).forEach((a,b)=>{"rejected"===a.status?console.error(`❌ Failed to parse feed ${e[b]}: ${a.reason}`):"fulfilled"===a.status&&null===a.value&&console.error(`❌ Feed ${e[b]} returned null`)}),j.length>2&&console.warn(`... and ${j.length-2} more failures`)),b.push(...i.map(a=>a.value)),c+20<a.length&&await new Promise(a=>setTimeout(a,50))}return a.length>5&&f(`✅ Successfully parsed ${b.length} albums from ${a.length} feeds`),b}static async parsePublisherFeedInfo(a){try{let b,d;if(!(b=await fetch(a)).ok)throw Error(`Failed to fetch publisher feed: ${b.status}`);let e=await b.text();{let{DOMParser:a}=await c.e(8821).then(c.t.bind(c,8821,19));d=new a().parseFromString(e,"text/xml")}if(d.getElementsByTagName("parsererror")[0])throw Error("Invalid XML format");let f=d.getElementsByTagName("channel");if(!f||0===f.length)throw Error("Invalid RSS feed: no channel found");let g=f[0],h=g.getElementsByTagName("title")[0],i=h?.textContent?.trim()||"",j=g.getElementsByTagName("description")[0],k=j?.textContent?.trim()||"",l=i,m=g.getElementsByTagName("itunes:author"),n=m.length>0?m[0]:g.getElementsByTagName("author")[0];n&&(l=n.textContent?.trim()||l);let o=null,p=g.getElementsByTagName("itunes:image")[0]||null;if(p||(p=g.querySelector("itunes\\:image")),p&&(o=p.getAttribute("href")||null),!o){let a=g.querySelector("image url");a&&(o=a.textContent?.trim()||null)}return{title:i,description:k,artist:l,coverArt:o||void 0}}catch(a){return console.error("❌ Error parsing publisher feed info:",a),null}}static async parsePublisherFeed(a){try{let b,d;if("iroh-aggregated"===a){let a,b;console.log("\uD83C\uDFB5 Loading IROH aggregated feed from Wavlake...");if(!(a=await fetch("https://wavlake.com/feed/artist/8a9c2e54-785a-4128-9412-737610f5d00a")).ok)throw Error(`Failed to fetch IROH artist feed: ${a.status}`);let d=await a.text();{let{DOMParser:a}=await c.e(8821).then(c.t.bind(c,8821,19));b=new a().parseFromString(d,"text/xml")}if(b.getElementsByTagName("parsererror")[0])throw Error("Invalid XML format");let e=b.getElementsByTagName("channel");if(!e||0===e.length)throw Error("Invalid RSS feed: no channel found");let g=e[0],h=[];return Array.from(g.getElementsByTagName("podcast:remoteItem")).forEach(a=>{let b=a.getAttribute("medium"),c=a.getAttribute("feedGuid"),d=a.getAttribute("feedUrl"),e=a.getAttribute("title")||a.textContent?.trim();"music"===b&&c&&d&&h.push({feedGuid:c,feedUrl:d,medium:b,title:e})}),f(`🏢 Found ${h.length} music items in IROH aggregated feed`),h}if("string"!=typeof a)throw console.error("parsePublisherFeed: feedUrl is not a string:",a),TypeError("feedUrl must be a string (URL). Received: "+typeof a);if(!(b=await fetch(a)).ok)throw Error(`Failed to fetch publisher feed: ${b.status}`);let e=await b.text();{let{DOMParser:a}=await c.e(8821).then(c.t.bind(c,8821,19));d=new a().parseFromString(e,"text/xml")}if(d.getElementsByTagName("parsererror")[0])throw Error("Invalid XML format");let g=d.getElementsByTagName("channel");if(!g||0===g.length)throw Error("Invalid RSS feed: no channel found");let h=g[0],i=[];return Array.from(h.getElementsByTagName("podcast:remoteItem")).forEach(a=>{let b=a.getAttribute("medium"),c=a.getAttribute("feedGuid"),d=a.getAttribute("feedUrl"),e=a.getAttribute("title")||a.textContent?.trim();"music"===b&&c&&d&&i.push({feedGuid:c,feedUrl:d,medium:b,title:e})}),f(`🏢 Found ${i.length} music items in publisher feed: ${a}`),i}catch(a){return console.error("❌ Error parsing publisher feed:",a),[]}}static async parsePublisherFeedAlbums(a){f(`🏢 Parsing publisher feed for albums: ${a}`);let b=await this.parsePublisherFeed(a);if(0===b.length)return f(`📭 No music items found in publisher feed: ${a}`),[];let c=b.map(a=>a.feedUrl);f(`🎵 Loading ${c.length} music feeds from publisher...`);let d=5,e=500;c.length>20&&(d=8,e=300);let g=[];for(let a=0;a<c.length;a+=d){let b=c.slice(a,a+d),h=Math.floor(a/d)+1,i=Math.ceil(c.length/d);f(`📦 Processing publisher batch ${h}/${i} (${b.length} feeds)`);try{let a=await this.parseMultipleFeeds(b);g.push(...a),f(`✅ Batch ${h}/${i} completed: ${a.length} albums (${g.length}/${c.length} total)`)}catch(a){console.error(`❌ Error in publisher batch ${h}/${i}:`,a)}a+d<c.length&&await new Promise(a=>setTimeout(a,e))}return f(`🎶 Loaded ${g.length} albums from publisher feed`),g}}}};