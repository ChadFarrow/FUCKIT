"use strict";exports.id=3039,exports.ids=[3039],exports.modules={16706:(a,b,c)=>{c.d(b,{g:()=>h});var d=c(29021),e=c.n(d),f=c(33873),g=c.n(f);class h{static{this.feedsData=null}static{this.feedsPath=g().join(process.cwd(),"data","feeds.json")}static loadFeeds(){if(this.feedsData)return this.feedsData;try{let a=e().readFileSync(this.feedsPath,"utf-8");return this.feedsData=JSON.parse(a),this.feedsData}catch(b){console.error("Failed to load feeds from data/feeds.json:",b);let a={feeds:[],lastUpdated:new Date().toISOString(),version:1};return this.feedsData=a,a}}static getActiveFeeds(){return this.loadFeeds().feeds.filter(a=>"active"===a.status)}static getFeedsByPriority(a){return this.getActiveFeeds().filter(b=>b.priority===a)}static getFeedsByType(a){return this.getActiveFeeds().filter(b=>b.type===a)}static getFeedUrlMappings(){return this.getActiveFeeds().map(a=>[a.originalUrl,a.type])}static getAlbumFeeds(){return this.getFeedsByType("album").map(a=>a.originalUrl)}static getPublisherFeeds(){return this.getFeedsByType("publisher").map(a=>a.originalUrl)}static getCoreFeeds(){return this.getFeedsByPriority("core").map(a=>a.originalUrl)}static getExtendedFeeds(){return this.getFeedsByPriority("extended").map(a=>a.originalUrl)}static getLowPriorityFeeds(){return this.getFeedsByPriority("low").map(a=>a.originalUrl)}static addFeed(a){let b=this.loadFeeds(),c={...a,addedAt:new Date().toISOString(),lastUpdated:new Date().toISOString()};b.feeds.push(c),b.lastUpdated=new Date().toISOString(),e().writeFileSync(this.feedsPath,JSON.stringify(b,null,2)),this.feedsData=b}static updateFeed(a,b){let c=this.loadFeeds(),d=c.feeds.findIndex(b=>b.id===a);-1!==d&&(c.feeds[d]={...c.feeds[d],...b,lastUpdated:new Date().toISOString()},c.lastUpdated=new Date().toISOString(),e().writeFileSync(this.feedsPath,JSON.stringify(c,null,2)),this.feedsData=c)}static removeFeed(a){let b=this.loadFeeds();b.feeds=b.feeds.filter(b=>b.id!==a),b.lastUpdated=new Date().toISOString(),e().writeFileSync(this.feedsPath,JSON.stringify(b,null,2)),this.feedsData=b}}},73039:(a,b,c)=>{c.d(b,{x:()=>i});var d=c(80170),e=c(29021),f=c.n(e),g=c(33873),h=c.n(g);class i{static{this.cacheDir=h().join(process.cwd(),"data","cache")}static{this.artworkDir=h().join(this.cacheDir,"artwork")}static{this.audioDir=h().join(this.cacheDir,"audio")}static{this.metadataFile=h().join(this.cacheDir,"cache-metadata.json")}static{this.statsFile=h().join(this.cacheDir,"cache-stats.json")}static{this.config={maxSize:0x280000000,maxAge:30,enableCompression:!0,enableResize:!0,maxImageSize:1024,audioQuality:"medium"}}static async initialize(){try{await this.ensureDirectory(this.cacheDir),await this.ensureDirectory(this.artworkDir),await this.ensureDirectory(this.audioDir),f().existsSync(this.metadataFile)||await this.saveMetadata([]),f().existsSync(this.statsFile)||await this.saveStats({totalItems:0,totalSize:0,artworkCount:0,audioCount:0,oldestItem:new Date().toISOString(),newestItem:new Date().toISOString(),cacheHitRate:0,lastCleanup:new Date().toISOString()}),console.log("✅ Cache system initialized")}catch(a){throw console.error("❌ Error initializing cache:",a),a}}static async cacheAllFeeds(){await this.initialize();let a=d.W.getParsedFeeds(),b=Array.isArray(a)?a:a.feeds||[],c=[],e=0,f=0;for(let a of(console.log(`🔄 Starting to cache ${b.length} feeds...`),b))if("album"===a.type&&a.parsedData?.album){let b=a.parsedData.album;try{for(let c of(b.coverArt&&await this.cacheArtwork(b.coverArt,a.id)&&e++,b.tracks))c.image&&await this.cacheArtwork(c.image,a.id,c.trackNumber)&&e++,c.url&&await this.cacheAudio(c.url,a.id,c.trackNumber)&&f++}catch(b){c.push({url:a.originalUrl,error:b instanceof Error?b.message:"Unknown error"})}}return await this.updateStats(),console.log(`✅ Caching completed: ${e} artwork, ${f} audio files`),{totalProcessed:b.length,artworkCached:e,audioCached:f,errors:c}}static async cacheArtwork(a,b,c){try{let d=this.generateCacheId(a,"artwork",b,c),e=h().join(this.artworkDir,`${d}.jpg`);if(f().existsSync(e))return await this.updateAccessTime(d),!0;let g=await fetch(a);if(!g.ok)throw Error(`HTTP ${g.status}: ${g.statusText}`);let i=await g.arrayBuffer(),j=Buffer.from(i),k=await this.processImage(j);return f().writeFileSync(e,k),await this.addCacheItem({id:d,originalUrl:a,cachedUrl:`/api/cache/artwork/${d}.jpg`,type:"artwork",size:k.length,mimeType:"image/jpeg",lastAccessed:new Date().toISOString(),createdAt:new Date().toISOString(),albumId:b,trackNumber:c}),console.log(`🖼️ Cached artwork: ${a}`),!0}catch(b){return console.error(`❌ Error caching artwork ${a}:`,b),!1}}static async cacheAudio(a,b,c){try{let d=this.generateCacheId(a,"audio",b,c),e=h().join(this.audioDir,`${d}.mp3`);if(f().existsSync(e))return await this.updateAccessTime(d),!0;let g=await fetch(a);if(!g.ok)throw Error(`HTTP ${g.status}: ${g.statusText}`);let i=await g.arrayBuffer();f().writeFileSync(e,Buffer.from(i));let j=f().statSync(e);return await this.addCacheItem({id:d,originalUrl:a,cachedUrl:`/api/cache/audio/${d}.mp3`,type:"audio",size:j.size,mimeType:"audio/mpeg",lastAccessed:new Date().toISOString(),createdAt:new Date().toISOString(),albumId:b,trackNumber:c}),console.log(`🎵 Cached audio: ${a}`),!0}catch(b){return console.error(`❌ Error caching audio ${a}:`,b),!1}}static getCachedUrl(a,b,c,d){let e=this.generateCacheId(a,b,c,d),g="artwork"===b?"jpg":"mp3",i=h().join("artwork"===b?this.artworkDir:this.audioDir,`${e}.${g}`);return f().existsSync(i)?(this.updateAccessTime(e).catch(console.error),`/api/cache/${b}/${e}.${g}`):null}static getCacheStats(){try{if(!f().existsSync(this.statsFile))return{totalItems:0,totalSize:0,artworkCount:0,audioCount:0,oldestItem:new Date().toISOString(),newestItem:new Date().toISOString(),cacheHitRate:0,lastCleanup:new Date().toISOString()};let a=f().readFileSync(this.statsFile,"utf-8");return JSON.parse(a)}catch(a){return console.error("Error reading cache stats:",a),{totalItems:0,totalSize:0,artworkCount:0,audioCount:0,oldestItem:new Date().toISOString(),newestItem:new Date().toISOString(),cacheHitRate:0,lastCleanup:new Date().toISOString()}}}static async cleanupCache(){let a=await this.getMetadata(),b=new Date,c=24*this.config.maxAge*36e5,d=0,e=0;for(let g of a){let a=new Date(g.lastAccessed);if(b.getTime()-a.getTime()>c){let a="artwork"===g.type?"jpg":"mp3",b="artwork"===g.type?this.artworkDir:this.audioDir,c=h().join(b,`${g.id}.${a}`);if(f().existsSync(c)){let a=f().statSync(c);f().unlinkSync(c),e+=a.size,d++}}}let g=a.filter(a=>{let d=new Date(a.lastAccessed);return b.getTime()-d.getTime()<=c});return await this.saveMetadata(g),await this.updateStats(),console.log(`🧹 Cache cleanup: removed ${d} items, freed ${(e/1024/1024).toFixed(2)}MB`),{removedItems:d,freedSpace:e}}static async clearCache(){try{let a=f().readdirSync(this.artworkDir),b=f().readdirSync(this.audioDir);for(let b of a)f().unlinkSync(h().join(this.artworkDir,b));for(let a of b)f().unlinkSync(h().join(this.audioDir,a));await this.saveMetadata([]),await this.saveStats({totalItems:0,totalSize:0,artworkCount:0,audioCount:0,oldestItem:new Date().toISOString(),newestItem:new Date().toISOString(),cacheHitRate:0,lastCleanup:new Date().toISOString()}),console.log("\uD83D\uDDD1️ Cache cleared")}catch(a){throw console.error("Error clearing cache:",a),a}}static generateCacheId(a,b,c,d){let e=Buffer.from(a).toString("base64").replace(/[^a-zA-Z0-9]/g,""),f=d?`-track${d}`:"";return`${b}-${c}-${e}${f}`}static async processImage(a){return a}static async ensureDirectory(a){f().existsSync(a)||f().mkdirSync(a,{recursive:!0})}static async getMetadata(){try{if(!f().existsSync(this.metadataFile))return[];let a=f().readFileSync(this.metadataFile,"utf-8");return JSON.parse(a)}catch(a){return console.error("Error reading cache metadata:",a),[]}}static async saveMetadata(a){f().writeFileSync(this.metadataFile,JSON.stringify(a,null,2))}static async addCacheItem(a){let b=await this.getMetadata(),c=b.findIndex(b=>b.id===a.id);-1!==c?b[c]=a:b.push(a),await this.saveMetadata(b)}static async updateAccessTime(a){let b=await this.getMetadata(),c=b.find(b=>b.id===a);c&&(c.lastAccessed=new Date().toISOString(),await this.saveMetadata(b))}static async saveStats(a){f().writeFileSync(this.statsFile,JSON.stringify(a,null,2))}static async updateStats(){let a=await this.getMetadata(),b=a.filter(a=>"artwork"===a.type),c=a.filter(a=>"audio"===a.type),d=a.reduce((a,b)=>a+b.size,0),e=a.length>0?a.reduce((a,b)=>new Date(b.createdAt)<new Date(a.createdAt)?b:a).createdAt:new Date().toISOString(),f=a.length>0?a.reduce((a,b)=>new Date(b.createdAt)>new Date(a.createdAt)?b:a).createdAt:new Date().toISOString(),g={totalItems:a.length,totalSize:d,artworkCount:b.length,audioCount:c.length,oldestItem:e,newestItem:f,cacheHitRate:0,lastCleanup:new Date().toISOString()};await this.saveStats(g)}}},80170:(a,b,c)=>{c.d(b,{W:()=>j});var d=c(16608),e=c(16706),f=c(29021),g=c.n(f),h=c(33873),i=c.n(h);class j{static{this.parsedDataPath=i().join(process.cwd(),"data","parsed-feeds.json")}static{this.reportPath=i().join(process.cwd(),"data","parse-reports")}static async parseAllFeeds(){let a=Date.now(),b=e.g.getActiveFeeds(),c=[],f=[];for(let a of(console.log(`🔄 Starting to parse ${b.length} active feeds...`),b))try{console.log(`📡 Parsing feed: ${a.title} (${a.originalUrl})`);let b={...a,parseStatus:"pending",lastParsed:new Date().toISOString()};if("album"===a.type){let c=await d.K.parseAlbumFeed(a.originalUrl);c?(b.parsedData={album:c},b.parseStatus="success",b.trackCount=c.tracks.length,b.duration=c.duration,b.hasPodRoll=c.podroll&&c.podroll.length>0,b.hasFunding=c.funding&&c.funding.length>0,b.categories=c.categories,b.keywords=c.keywords):(b.parseStatus="error",b.parseError="No album data found",f.push({feedId:a.id,feedUrl:a.originalUrl,error:"No album data found"}))}else if("publisher"===a.type)try{let c=await d.K.parsePublisherFeedInfo(a.originalUrl),e=await d.K.parsePublisherFeed(a.originalUrl);b.parsedData={publisherInfo:c||void 0,publisherItems:e},b.parseStatus="success"}catch(c){b.parseStatus="error",b.parseError=c instanceof Error?c.message:"Unknown error",f.push({feedId:a.id,feedUrl:a.originalUrl,error:b.parseError})}c.push(b),await new Promise(a=>setTimeout(a,100))}catch(d){console.error(`❌ Error parsing feed ${a.id}:`,d);let b={...a,parseStatus:"error",parseError:d instanceof Error?d.message:"Unknown error",lastParsed:new Date().toISOString()};c.push(b),f.push({feedId:a.id,feedUrl:a.originalUrl,error:b.parseError||"Unknown error"})}await this.saveParsedFeeds(c);let g=this.generateReport(c,f,Date.now()-a);return await this.saveParseReport(g),console.log(`✅ Feed parsing completed!`),console.log(`📊 Report: ${g.successfulParses}/${g.totalFeeds} feeds parsed successfully`),console.log(`🎵 Found ${g.albumsFound} albums with ${g.totalTracks} tracks`),console.log(`🏢 Found ${g.publishersFound} publishers`),console.log(`⏱️ Total parse time: ${(g.parseTime/1e3).toFixed(2)}s`),g}static async parseFeedById(a){let b=e.g.getActiveFeeds().find(b=>b.id===a);if(!b)throw Error(`Feed with ID '${a}' not found`);let c={...b,parseStatus:"pending",lastParsed:new Date().toISOString()};try{if("album"===b.type){let a=await d.K.parseAlbumFeed(b.originalUrl);a?(c.parsedData={album:a},c.parseStatus="success",c.trackCount=a.tracks.length,c.duration=a.duration,c.hasPodRoll=a.podroll&&a.podroll.length>0,c.hasFunding=a.funding&&a.funding.length>0,c.categories=a.categories,c.keywords=a.keywords):(c.parseStatus="error",c.parseError="No album data found")}else if("publisher"===b.type){let a=await d.K.parsePublisherFeedInfo(b.originalUrl),e=await d.K.parsePublisherFeed(b.originalUrl);c.parsedData={publisherInfo:a||void 0,publisherItems:e},c.parseStatus="success"}return await this.updateParsedFeed(c),c}catch(a){throw c.parseStatus="error",c.parseError=a instanceof Error?a.message:"Unknown error",await this.updateParsedFeed(c),a}}static getParsedFeeds(){try{if(!g().existsSync(this.parsedDataPath))return[];let a=g().readFileSync(this.parsedDataPath,"utf-8"),b=JSON.parse(a);return Array.isArray(b)?b:b.feeds||[]}catch(a){return console.error("Error reading parsed feeds:",a),[]}}static getParsedFeedById(a){return this.getParsedFeeds().find(b=>b.id===a)||null}static getParsedAlbums(){return this.getParsedFeeds().filter(a=>"album"===a.type&&"success"===a.parseStatus&&a.parsedData?.album).map(a=>a.parsedData.album).filter(Boolean)}static getAlbumsByPriority(a){return this.getParsedFeeds().filter(b=>"album"===b.type&&b.priority===a&&"success"===b.parseStatus&&b.parsedData?.album).map(a=>a.parsedData.album).filter(Boolean)}static getAlbumsWithPodRoll(){return this.getParsedFeeds().filter(a=>"album"===a.type&&"success"===a.parseStatus&&a.hasPodRoll&&a.parsedData?.album).map(a=>a.parsedData.album).filter(Boolean)}static getAlbumsWithFunding(){return this.getParsedFeeds().filter(a=>"album"===a.type&&"success"===a.parseStatus&&a.hasFunding&&a.parsedData?.album).map(a=>a.parsedData.album).filter(Boolean)}static searchAlbums(a){let b=this.getParsedAlbums(),c=a.toLowerCase();return b.filter(a=>a.title.toLowerCase().includes(c)||a.artist.toLowerCase().includes(c)||a.description&&a.description.toLowerCase().includes(c))}static getParseStats(){let a=this.getParsedFeeds(),b=Array.isArray(a)?a:a.feeds||[];return{totalFeeds:b.length,successfulParses:b.filter(a=>"success"===a.parseStatus).length,failedParses:b.filter(a=>"error"===a.parseStatus).length,albumsFound:b.filter(a=>"album"===a.type&&"success"===a.parseStatus).length,publishersFound:b.filter(a=>"publisher"===a.type&&"success"===a.parseStatus).length,totalTracks:b.reduce((a,b)=>a+(b.trackCount||0),0),podRollFeeds:b.filter(a=>a.hasPodRoll).length,fundingFeeds:b.filter(a=>a.hasFunding).length}}static async saveParsedFeeds(a){try{let b={feeds:a,lastUpdated:new Date().toISOString(),version:1},c=i().dirname(this.parsedDataPath);g().existsSync(c)||g().mkdirSync(c,{recursive:!0}),g().writeFileSync(this.parsedDataPath,JSON.stringify(b,null,2)),console.log(`💾 Saved parsed feeds to ${this.parsedDataPath}`)}catch(a){throw console.error("Error saving parsed feeds:",a),a}}static async updateParsedFeed(a){let b=this.getParsedFeeds(),c=b.findIndex(b=>b.id===a.id);-1!==c?b[c]=a:b.push(a),await this.saveParsedFeeds(b)}static generateReport(a,b,c){let d=a.filter(a=>"success"===a.parseStatus).length,e=a.filter(a=>"album"===a.type&&"success"===a.parseStatus).length,f=a.filter(a=>"publisher"===a.type&&"success"===a.parseStatus).length,g=a.reduce((a,b)=>a+(b.trackCount||0),0),h=a.filter(a=>a.hasPodRoll).length,i=a.filter(a=>a.hasFunding).length,j=a.reduce((a,b)=>{if(b.duration){let c=b.duration.split(":").map(Number);if(3===c.length)return a+(3600*c[0]+60*c[1]+c[2])*1e3;if(2===c.length)return a+(60*c[0]+c[1])*1e3}return a},0),k=this.formatDuration(j);return{totalFeeds:a.length,successfulParses:d,failedParses:a.length-d,albumsFound:e,publishersFound:f,totalTracks:g,totalDuration:k,podRollFeeds:h,fundingFeeds:i,parseTime:c,timestamp:new Date().toISOString(),errors:b}}static async saveParseReport(a){try{g().existsSync(this.reportPath)||g().mkdirSync(this.reportPath,{recursive:!0});let b=`parse-report-${new Date().toISOString().split("T")[0]}-${Date.now()}.json`,c=i().join(this.reportPath,b);g().writeFileSync(c,JSON.stringify(a,null,2)),console.log(`📊 Saved parse report to ${c}`)}catch(a){console.error("Error saving parse report:",a)}}static formatDuration(a){let b=Math.floor(a/1e3),c=Math.floor(b/3600),d=Math.floor(b%3600/60),e=b%60;return c>0?`${c.toString().padStart(2,"0")}:${d.toString().padStart(2,"0")}:${e.toString().padStart(2,"0")}`:`${d.toString().padStart(2,"0")}:${e.toString().padStart(2,"0")}`}}}};