# Task ID: 16
# Title: Build persistent playlist system
# Status: pending
# Dependencies: None
# Priority: high
# Description: Create a complete playlist system that extracts music from the Doerfel-Verse RSS feed, saves it persistently, and provides playback functionality
# Details:
Need to: 1) Extract all music tracks from https://www.doerfelverse.com/feeds/intothedoerfelverse.xml, 2) Save tracks to persistent storage (database or JSON), 3) Create playlist player with queue management, 4) Add continuous playback features, 5) Prepare for Podcasting 2.0 music playlist export format

# Test Strategy:


# Subtasks:
## 1. Review and document existing implementation [pending]
### Dependencies: None
### Description: Analyze current /app/playlist/itdv/page.tsx and /data/music-tracks.json to understand what's already built
### Details:
Document: existing data structure (2915 tracks), current playback functionality, caching mechanisms, and identify what needs enhancement vs what's working

## 2. Fix data loading to use persistent storage [pending]
### Dependencies: None
### Description: Ensure the playlist page always loads from /data/music-tracks.json instead of fetching RSS feed repeatedly
### Details:
Modify loadMainFeedTracks() to properly use local://database endpoint, remove redundant feed fetching, ensure cache works with local data

## 3. Implement continuous playback queue [pending]
### Dependencies: None
### Description: Add queue management for continuous track playback with play next, add to queue, and auto-advance features
### Details:
Add: playQueue state management, queue controls UI, auto-advance to next track on completion, queue persistence in localStorage, shuffle and repeat modes

## 4. Add Podcasting 2.0 playlist export [pending]
### Dependencies: None
### Description: Create export functionality to generate Podcasting 2.0 compliant music playlist format
### Details:
Implement: export to XML/JSON format per Podcasting 2.0 spec, include all track metadata (title, artist, duration, audioUrl, startTime, endTime), add download button for playlist file

## 5. Add data refresh mechanism [pending]
### Dependencies: None
### Description: Create a way to update the persistent storage with new tracks from the RSS feed when needed
### Details:
Add: manual refresh button, check for new episodes, merge new tracks without duplicates, update /data/music-tracks.json, show last updated timestamp

