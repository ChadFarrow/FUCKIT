{
  "tags": {
    "feature-new-feature": {
      "name": "feature-new-feature",
      "description": "Tasks for the new feature development",
      "tasks": [
        {
          "id": 1,
          "title": "Implement RSS Feed Music Track Detection Parser",
          "description": "Create a parser to identify music tracks within podcast episodes by analyzing episode descriptions, chapter data, and value time splits",
          "status": "pending",
          "priority": "high",
          "dependencies": [],
          "details": "Build a core parser that can analyze RSS feed episodes and extract music track information from various sources including episode descriptions, chapter JSON files, and value time splits. This will be the foundation for the music track extraction feature.",
          "testStrategy": "Test with the Doerfel-Verse RSS feed to ensure it can identify music tracks from episode descriptions and chapter data",
          "subtasks": []
        },
        {
          "id": 2,
          "title": "Parse Chapter JSON Files for Track Information",
          "description": "Implement parsing of podcast chapter JSON files to extract music track timestamps and metadata",
          "status": "pending",
          "priority": "high",
          "dependencies": [
            1
          ],
          "details": "Create a chapter parser that can fetch and parse JSON chapter files referenced in RSS feeds. Extract track titles, start/end times, and any additional metadata from the chapter data.",
          "testStrategy": "Test with chapter files from the Doerfel-Verse feed to verify accurate timestamp and track information extraction",
          "subtasks": []
        },
        {
          "id": 3,
          "title": "Extract Value Time Splits for Music Sharing",
          "description": "Parse value-for-value time splits to identify music segments with Lightning Network payment information",
          "status": "pending",
          "priority": "medium",
          "dependencies": [
            1
          ],
          "details": "Implement parsing of podcast:valueTimeSplit elements to identify music segments that are shared via value-for-value. Extract payment addresses, suggested amounts, and custom keys/values.",
          "testStrategy": "Test with feeds containing value time splits to ensure proper extraction of Lightning Network payment details",
          "subtasks": []
        },
        {
          "id": 4,
          "title": "Create Music Track Data Models",
          "description": "Define TypeScript interfaces and data structures for music tracks and related metadata",
          "status": "pending",
          "priority": "high",
          "dependencies": [],
          "details": "Create comprehensive TypeScript interfaces for MusicTrack and MusicFeed data structures. Include all necessary fields for track metadata, value-for-value information, and feed relationships.",
          "testStrategy": "Create unit tests to validate data model structure and type safety",
          "subtasks": []
        },
        {
          "id": 5,
          "title": "Implement Podcast Roll Parsing",
          "description": "Parse podcast roll elements to discover related music feeds and build feed relationships",
          "status": "pending",
          "priority": "medium",
          "dependencies": [
            1
          ],
          "details": "Create a parser for podcast:podroll elements to identify related music feeds. Track feed relationships and hierarchies to enable music content aggregation across multiple feeds.",
          "testStrategy": "Test with feeds containing podcast roll elements to verify proper feed discovery and relationship tracking",
          "subtasks": []
        },
        {
          "id": 6,
          "title": "Build Music Track API Endpoints",
          "description": "Create REST API endpoints for music track extraction, search, and feed analysis",
          "status": "pending",
          "priority": "high",
          "dependencies": [
            4
          ],
          "details": "Implement API endpoints including GET /api/music-tracks, GET /api/music-feeds, and POST /api/music-tracks/analyze. Include proper error handling, rate limiting, and response formatting.",
          "testStrategy": "Create API tests to verify endpoint functionality and response formats",
          "subtasks": []
        },
        {
          "id": 7,
          "title": "Create Music Track List Component",
          "description": "Build a React component to display discovered music tracks in a searchable, filterable interface",
          "status": "pending",
          "priority": "medium",
          "dependencies": [
            6
          ],
          "details": "Create a music track list view component with filtering by artist, episode, feed, or source. Include sorting options and search functionality. Design with responsive layout for mobile and desktop.",
          "testStrategy": "Test component with sample music track data to verify filtering, sorting, and search functionality",
          "subtasks": []
        },
        {
          "id": 8,
          "title": "Implement Music Track Detail View",
          "description": "Create a detailed view component for individual music tracks with metadata and value-for-value integration",
          "status": "pending",
          "priority": "medium",
          "dependencies": [
            7
          ],
          "details": "Build a track detail view that displays full metadata, audio player integration, value-for-value payment interface, and related tracks. Include proper error handling for missing data.",
          "testStrategy": "Test with various track data scenarios including missing metadata and value-for-value information",
          "subtasks": []
        },
        {
          "id": 9,
          "title": "Add Feed Analysis Dashboard",
          "description": "Create a dashboard to display music content statistics and feed relationship visualization",
          "status": "pending",
          "priority": "low",
          "dependencies": [
            6
          ],
          "details": "Build a dashboard component showing music content statistics, feed relationship visualization, discovery timeline, and export functionality. Include charts and analytics for user engagement.",
          "testStrategy": "Test dashboard with sample data to verify statistics calculation and visualization accuracy",
          "subtasks": []
        },
        {
          "id": 10,
          "title": "Implement Audio Player Integration",
          "description": "Add audio player functionality to play music tracks directly from the interface",
          "status": "pending",
          "priority": "medium",
          "dependencies": [
            8
          ],
          "details": "Integrate an audio player component that can play music tracks from their audio URLs. Include play/pause controls, progress tracking, and volume control. Handle various audio formats.",
          "testStrategy": "Test audio player with different audio formats and URLs to ensure proper playback functionality",
          "subtasks": []
        },
        {
          "id": 11,
          "title": "Add Export and Analytics Features",
          "description": "Implement export functionality and analytics tracking for music discovery features",
          "status": "pending",
          "priority": "low",
          "dependencies": [
            9
          ],
          "details": "Add export functionality for music track data in various formats (JSON, CSV). Implement analytics tracking for user engagement with music discovery features. Include performance monitoring.",
          "testStrategy": "Test export functionality with sample data and verify analytics tracking accuracy",
          "subtasks": []
        },
        {
          "id": 12,
          "title": "Performance Optimization and Testing",
          "description": "Optimize performance and conduct comprehensive testing of the music track extraction feature",
          "status": "pending",
          "priority": "high",
          "dependencies": [
            11
          ],
          "details": "Implement caching for parsed feed data, optimize API response times, and add comprehensive error handling. Conduct end-to-end testing with various RSS feeds and edge cases.",
          "testStrategy": "Run performance benchmarks and conduct user acceptance testing with real RSS feeds",
          "subtasks": []
        }
      ]
    }
  },
  "currentTag": "feature-new-feature",
  "feature-music-track-extraction": {
    "tasks": [
      {
        "id": 1,
        "title": "Implement RSS Feed Music Track Detection Parser",
        "description": "Create a parser to identify music tracks within podcast episodes by analyzing episode descriptions, chapter data, and value time splits",
        "status": "done",
        "priority": "high",
        "dependencies": [],
        "details": "Build a core parser that can analyze RSS feed episodes and extract music track information from various sources including episode descriptions, chapter JSON files, and value time splits. This will be the foundation for the music track extraction feature.",
        "testStrategy": "Test with the Doerfel-Verse RSS feed to ensure it can identify music tracks from episode descriptions and chapter data",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Parse Chapter JSON Files for Track Information",
        "description": "Implement parsing of podcast chapter JSON files to extract music track timestamps and metadata",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1
        ],
        "details": "Create a chapter parser that can fetch and parse JSON chapter files referenced in RSS feeds. Extract track titles, start/end times, and any additional metadata from the chapter data.",
        "testStrategy": "Test with chapter files from the Doerfel-Verse feed to verify accurate timestamp and track information extraction",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Extract Value Time Splits for Music Sharing",
        "description": "Parse value-for-value time splits to identify music segments with Lightning Network payment information",
        "status": "done",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "details": "Implement parsing of podcast:valueTimeSplit elements to identify music segments that are shared via value-for-value. Extract payment addresses, suggested amounts, and custom keys/values.",
        "testStrategy": "Test with feeds containing value time splits to ensure proper extraction of Lightning Network payment details",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Create Music Track Data Models",
        "description": "Define TypeScript interfaces and data structures for music tracks and related metadata",
        "status": "done",
        "priority": "high",
        "dependencies": [],
        "details": "Create comprehensive TypeScript interfaces for MusicTrack and MusicFeed data structures. Include all necessary fields for track metadata, value-for-value information, and feed relationships.",
        "testStrategy": "Create unit tests to validate data model structure and type safety",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Implement Podcast Roll Parsing",
        "description": "Parse podcast roll elements to discover related music feeds and build feed relationships",
        "status": "done",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "details": "Create a parser for podcast:podroll elements to identify related music feeds. Track feed relationships and hierarchies to enable music content aggregation across multiple feeds.",
        "testStrategy": "Test with feeds containing podcast roll elements to verify proper feed discovery and relationship tracking",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Build Music Track API Endpoints",
        "description": "Create REST API endpoints for music track extraction, search, and feed analysis",
        "status": "done",
        "priority": "high",
        "dependencies": [
          4
        ],
        "details": "Implement API endpoints including GET /api/music-tracks, GET /api/music-feeds, and POST /api/music-tracks/analyze. Include proper error handling, rate limiting, and response formatting.",
        "testStrategy": "Create API tests to verify endpoint functionality and response formats",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Create Music Track List Component",
        "description": "Build a React component to display discovered music tracks in a searchable, filterable interface",
        "status": "done",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "details": "Create a music track list view component with filtering by artist, episode, feed, or source. Include sorting options and search functionality. Design with responsive layout for mobile and desktop.",
        "testStrategy": "Test component with sample music track data to verify filtering, sorting, and search functionality",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement Music Track Detail View",
        "description": "Create a detailed view component for individual music tracks with metadata and value-for-value integration",
        "status": "done",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "details": "Build a track detail view that displays full metadata, audio player integration, value-for-value payment interface, and related tracks. Include proper error handling for missing data.",
        "testStrategy": "Test with various track data scenarios including missing metadata and value-for-value information",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Add Feed Analysis Dashboard",
        "description": "Create a dashboard to display music content statistics and feed relationship visualization",
        "status": "pending",
        "priority": "low",
        "dependencies": [
          6
        ],
        "details": "Build a dashboard component showing music content statistics, feed relationship visualization, discovery timeline, and export functionality. Include charts and analytics for user engagement.",
        "testStrategy": "Test dashboard with sample data to verify statistics calculation and visualization accuracy",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement Audio Player Integration",
        "description": "Add audio player functionality to play music tracks directly from the interface",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "details": "Integrate an audio player component that can play music tracks from their audio URLs. Include play/pause controls, progress tracking, and volume control. Handle various audio formats.",
        "testStrategy": "Test audio player with different audio formats and URLs to ensure proper playback functionality",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Add Export and Analytics Features",
        "description": "Implement export functionality and analytics tracking for music discovery features",
        "status": "pending",
        "priority": "low",
        "dependencies": [
          9
        ],
        "details": "Add export functionality for music track data in various formats (JSON, CSV). Implement analytics tracking for user engagement with music discovery features. Include performance monitoring.",
        "testStrategy": "Test export functionality with sample data and verify analytics tracking accuracy",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Performance Optimization and Testing",
        "description": "Optimize performance and conduct comprehensive testing of the music track extraction feature",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          11
        ],
        "details": "Implement caching for parsed feed data, optimize API response times, and add comprehensive error handling. Conduct end-to-end testing with various RSS feeds and edge cases.",
        "testStrategy": "Run performance benchmarks and conduct user acceptance testing with real RSS feeds",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Implement V4V Music Track Extraction",
        "description": "Extract Value4Value (V4V) data from music podcast RSS feeds including Value Time Splits, music tracks, and payment distribution information",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Analyze V4V RSS Feed Structure",
            "description": "Study the Doerfel-Verse RSS feed structure to understand Value4Value elements, Value Time Splits format, and music track metadata patterns",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 2,
            "title": "Implement Value Time Splits Parser",
            "description": "Create parser to extract Value Time Splits data from RSS feeds, including recipient information, percentages, and time ranges for music tracks",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 3,
            "title": "Extract Music Track Information",
            "description": "Identify and extract individual music tracks from podcast episodes, including track metadata, timestamps, and associated V4V data",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 4,
            "title": "Integrate with Podcast Index API",
            "description": "Connect to Podcast Index API to fetch additional V4V metadata, Value Time Splits, and music track information not available in RSS feeds",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 5,
            "title": "Create Music Track Database Schema",
            "description": "Design database schema to store extracted music tracks, V4V data, Value Time Splits, and relationships between tracks and episodes",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 6,
            "title": "Build Music Track Display UI",
            "description": "Create user interface components to display extracted music tracks with V4V information, Value Time Splits, and payment distribution details",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 13
          }
        ]
      },
      {
        "id": 14,
        "title": "Fix re.podtards.com publisher feed display issue",
        "description": "The Doerfels page shows 'No Albums Found' despite having 35 music albums in the parsed publisher feed. The issue appears to be that re.podtards.com is looking for a podcast:remoteItem with medium='publisher' that points to the doerfels publisher feed, but this entry may be missing from the main feed index.",
        "details": "Investigate why re.podtards.com is not displaying The Doerfels' publisher feed items. The parsed feeds show 35 music albums are available, but the page shows 'No Albums Found'. Need to check the feed discovery mechanism and ensure the publisher feed is properly indexed.",
        "testStrategy": "",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Investigate re.podtards.com feed discovery mechanism",
            "description": "Understand how re.podtards.com discovers and indexes publisher feeds. Check if there's a main feed index or directory that needs to include the doerfels publisher feed.",
            "details": "Research the feed discovery process used by re.podtards.com. Look for any main feed indexes, directories, or API endpoints that list available publisher feeds. Check if the doerfels publisher feed needs to be registered in a central location.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 14
          },
          {
            "id": 2,
            "title": "Check doerfels publisher feed parsing status",
            "description": "Verify that the doerfels publisher feed is being parsed correctly and contains the expected 35 music albums.",
            "details": "Examine the parsed feeds data to confirm the doerfels-publisher feed has parseStatus 'success' and contains all 35 music albums. Check if there are any parsing errors or missing data.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 14
          },
          {
            "id": 3,
            "title": "Test re.podtards.com API endpoints",
            "description": "Test the re.podtards.com API endpoints to understand how publisher feeds are retrieved and displayed.",
            "details": "Investigate the re.podtards.com API structure. Check if there are endpoints for retrieving publisher feeds, and test how the doerfels publisher feed is being accessed. Look for any API errors or missing data.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 14
          },
          {
            "id": 4,
            "title": "Implement feed discovery fix",
            "description": "Based on investigation findings, implement the necessary fix to ensure the doerfels publisher feed is properly discovered and displayed on re.podtards.com.",
            "details": "Apply the fix identified in the investigation. This may involve updating feed indexes, API endpoints, or data structures to ensure the doerfels publisher feed is properly registered and accessible.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 14
          },
          {
            "id": 5,
            "title": "Test and verify the fix",
            "description": "Test the implemented fix to ensure the doerfels publisher feed now displays correctly on re.podtards.com with all 35 music albums visible.",
            "details": "Verify that the fix works by checking the re.podtards.com page for The Doerfels. Confirm that all 35 music albums are now displayed instead of 'No Albums Found'. Test the API endpoints to ensure they return the correct data.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 14
          }
        ]
      },
      {
        "id": 15,
        "title": "Fix playlist page filtering and V4V track display",
        "description": "The playlist page at /playlist/itdv was showing 0 tracks due to overly restrictive filtering logic. Need to fix the filtering to properly show V4V tracks from Episode 31 and resolve the JavaScript errors causing 500 Internal Server Error. Also need to ensure the playlist shows the real track information (artist names, titles) instead of placeholder data.",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          13,
          14
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Fix JavaScript errors in playlist page",
            "description": "Fixed 'Cannot read properties of undefined' errors by adding null checks for track properties and fallback empty strings before calling toLowerCase(). This resolved the 500 Internal Server Error that was preventing the playlist page from loading.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 15
          },
          {
            "id": 2,
            "title": "Add debugging to playlist filtering logic",
            "description": "Added detailed console logging to show which tracks are being included or filtered out. This will help identify why the filtering is too restrictive and why we're getting 0 tracks after filtering. Shows raw tracks before filtering and logs for each track that gets included or filtered out.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 15
          },
          {
            "id": 3,
            "title": "Implement comprehensive UI/UX improvements for ITDV playlist page",
            "description": "Added major enhancements to the ITDV playlist page including search, filtering, track details modal, improved audio playback, and better error handling.",
            "details": "**Major Enhancements Added:**\n1. **Search & Filtering System**: Added real-time search across track titles, artists, and episodes with advanced filtering by source type and episode\n2. **Improved Error Handling**: Added proper error states with retry functionality and better null checks for track properties\n3. **Enhanced Audio Playback**: Added loading states for audio playback, better error handling, and improved user feedback\n4. **Track Details Modal**: Added a detailed modal showing track information including time ranges, V4V references, and source details\n5. **Better UI/UX**: Added info panel explaining track sources, improved navigation with link to V4V Music Library, and better visual feedback\n6. **Debugging & Logging**: Added comprehensive console logging to track data flow and identify issues\n7. **Responsive Design**: Improved mobile responsiveness and accessibility\n\n**Technical Improvements:**\n- Fixed null reference errors with proper fallbacks\n- Added async/await pattern for audio playback\n- Implemented proper loading states and error boundaries\n- Added comprehensive filtering and sorting options\n- Improved data validation and error recovery\n\nThe page now loads 283 tracks successfully and provides a much better user experience with search, filtering, and detailed track information.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 15
          },
          {
            "id": 4,
            "title": "Update HGH playlist page UI to match ITDV dark theme design",
            "description": "Successfully updated the Homegrown Hits (HGH) playlist page to match the ITDV page's dark theme UI/layout while preserving all HGH-specific functionality. Copied dark theme styling, updated header/stats/filters/track list, added info panel, maintained HGH data loading and V4V resolution, and deployed to production (v1.567).",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 15
          }
        ]
      },
      {
        "id": 16,
        "title": "Build persistent playlist system",
        "description": "Create a complete playlist system that extracts music from the Doerfel-Verse RSS feed, saves it persistently, and provides playback functionality",
        "details": "Need to: 1) Extract all music tracks from https://www.doerfelverse.com/feeds/intothedoerfelverse.xml, 2) Save tracks to persistent storage (database or JSON), 3) Create playlist player with queue management, 4) Add continuous playback features, 5) Prepare for Podcasting 2.0 music playlist export format",
        "testStrategy": "",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Review and document existing implementation",
            "description": "Analyze current /app/playlist/itdv/page.tsx and /data/music-tracks.json to understand what's already built",
            "details": "Document: existing data structure (2915 tracks), current playback functionality, caching mechanisms, and identify what needs enhancement vs what's working",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 16
          },
          {
            "id": 2,
            "title": "Fix data loading to use persistent storage",
            "description": "Ensure the playlist page always loads from /data/music-tracks.json instead of fetching RSS feed repeatedly",
            "details": "Modify loadMainFeedTracks() to properly use local://database endpoint, remove redundant feed fetching, ensure cache works with local data",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 16
          },
          {
            "id": 3,
            "title": "Implement continuous playback queue",
            "description": "Add queue management for continuous track playback with play next, add to queue, and auto-advance features",
            "details": "Add: playQueue state management, queue controls UI, auto-advance to next track on completion, queue persistence in localStorage, shuffle and repeat modes",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 16
          },
          {
            "id": 4,
            "title": "Add Podcasting 2.0 playlist export",
            "description": "Create export functionality to generate Podcasting 2.0 compliant music playlist format",
            "details": "Implement: export to XML/JSON format per Podcasting 2.0 spec, include all track metadata (title, artist, duration, audioUrl, startTime, endTime), add download button for playlist file",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 16
          },
          {
            "id": 5,
            "title": "Add data refresh mechanism",
            "description": "Create a way to update the persistent storage with new tracks from the RSS feed when needed",
            "details": "Add: manual refresh button, check for new episodes, merge new tracks without duplicates, update /data/music-tracks.json, show last updated timestamp",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 16
          }
        ]
      },
      {
        "id": 17,
        "title": "Fix playlist parsing issues",
        "description": "Investigate why playlist only starts at Episode 52, all tracks are 5 minutes titled 'Verse', and implement proper episode-by-episode parsing starting from Episode 56",
        "details": "Issues: 1) Only shows Episode 52 onwards, 2) All tracks are exactly 5 minutes, 3) All titled 'Verse' instead of real track names, 4) Need episode-by-episode parsing from Episode 56 backwards",
        "testStrategy": "",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Fix V4V Artist Resolution Display Issue",
        "description": "Fixed the ITDV playlist to display resolved V4V artist names instead of 'Unknown Artist'",
        "details": "The getDisplayArtist() function was not properly checking for resolved V4V artist data. Updated to prioritize valueForValue.resolvedArtist when available and resolved=true.",
        "testStrategy": "",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Fix tracks playing from episode feed instead of resolved V4V URLs",
        "description": "Some V4V-resolved tracks are still playing audio from the Doerfelverse episode feed instead of using the resolved audio URLs from the actual music feeds",
        "details": "When V4V resolution is successful, tracks have resolvedAudioUrl pointing to the actual music file (e.g., from Wavlake), but the player might still be using the episode's audio URL with start/end timestamps. Need to ensure the audio player uses resolvedAudioUrl when available for proper music playback.",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          18
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "Fix persistent \"Unknown Artist\" display issue",
        "description": "Artists are still showing as \"Unknown Artist\" in the ITDV playlist despite V4V resolution returning correct artist names",
        "details": "The API returns correct V4V resolved data with artist names like \"John Depew Trio\" and \"Big Awesome\", and the getDisplayArtist() function was updated to check valueForValue.resolvedArtist, but the UI still displays \"Unknown Artist\". This may be a caching issue, data transformation problem, or React rendering issue where the component isn't properly updating with the resolved data.",
        "testStrategy": "",
        "status": "in-progress",
        "dependencies": [
          18
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 21,
        "title": "Clean up dead code throughout the project",
        "description": "Remove unused variables, commented-out code blocks, debug-only components, temporary investigation scripts, and unused imports to improve maintainability and reduce bundle size.",
        "details": "",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Remove unused variables and functions from app/page.tsx",
            "description": "Remove the unused variables isDev, isVerbose, devLog, and verboseLog that are defined but never used. These were disabled for performance but are still taking up space in the code.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          },
          {
            "id": 2,
            "title": "Remove debug console.log statements from LightningThrashesPlaylistAlbum.tsx",
            "description": "Remove all the debug console.log statements and debug fallback code that creates fake tracks. This includes the debugTracks mapping and all console.log calls that were added for debugging purposes.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          },
          {
            "id": 3,
            "title": "Remove MobileImageDebug component and test page",
            "description": "Delete the MobileImageDebug.tsx component and the /app/test-mobile-images/page.tsx file. This is a debug-only component that's only used in a test page and should be removed from production code.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          },
          {
            "id": 4,
            "title": "Delete temporary Lightning Thrashes investigation scripts",
            "description": "Remove the 6 temporary scripts created during Lightning Thrashes investigation: fetch-lightning-thrashes-durations.js, fetch-lightning-thrashes-durations-simple.js, analyze-lightning-thrashes-playlist.js, fetch-podcastindex-episodes.js, fetch-lightning-thrashes-actual.js, and fetch-lightning-thrashes-music-tracks.js.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          },
          {
            "id": 5,
            "title": "Remove unused imports from app/page.tsx",
            "description": "Remove the unused import createErrorLogger from @/lib/error-utils since it's commented out and not used anywhere in the file.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          },
          {
            "id": 6,
            "title": "Clean up commented service worker code in ServiceWorkerRegistration.tsx",
            "description": "Either remove the large commented-out service worker registration code block (80+ lines) or document why it's being kept. This code is disabled due to API issues but takes up significant space.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          },
          {
            "id": 7,
            "title": "Review and clean up TODO comments",
            "description": "Review all TODO comments in the codebase and either implement the features or remove the comments. Focus on TODO comments in lib/feed-cache.ts, components/V4VMusicTrackCard.tsx, components/V4VMusicTrackList.tsx, and components/GlobalNowPlayingBar.tsx.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          },
          {
            "id": 8,
            "title": "Remove debug comments and unused JSX comments",
            "description": "Remove debug comments like \"Debug info removed for performance\" and unused JSX comments throughout the codebase. These comments add no value and clutter the code.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 21
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-08-01T21:46:44.417Z",
      "updated": "2025-08-05T03:16:39.096Z",
      "description": "Music track extraction feature development"
    }
  },
  "audio-playback-fixes": {
    "tasks": [],
    "metadata": {
      "created": "2025-08-01T22:54:10.108Z",
      "updated": "2025-08-01T22:54:10.108Z",
      "description": "Audio playback and resource preloading fixes for the FUCKIT music application"
    }
  }
}