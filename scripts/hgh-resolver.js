#!/usr/bin/env node

/**
 * Unified HGH track resolution tool
 * 
 * Consolidated from: resolve-hgh-feeds.js, resolve-hgh-media-urls.js, resolve-hgh-media-urls-fast.js, scripts/resolve-hgh-tracks.js, scripts/resolve-hgh-tracks-detailed.js, scripts/resolve-hgh-slowly.js, improved-hgh-resolution.js, direct-rss-resolution.js, final-resolution-attempt.js, reparse-hgh-feed.js, scripts/parse-hgh-feed.js
 * Generated by: cleanup-and-consolidate-scripts.js
 * Created: 2025-08-09T23:22:12.866Z
 */

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

// Load environment variables
require('dotenv').config({ path: path.join(__dirname, '..', '.env.local') });

// Podcast Index API setup
const API_KEY = process.env.PODCAST_INDEX_API_KEY;
const API_SECRET = process.env.PODCAST_INDEX_API_SECRET;

class UnifiedTool {
  constructor() {
    this.validateCredentials();
  }

  validateCredentials() {
    if (!API_KEY || !API_SECRET) {
      console.warn('⚠️ Missing Podcast Index API credentials in .env.local');
      console.log('Some features may not work without API access');
    }
  }

  createAuthHeaders() {
    if (!API_KEY || !API_SECRET) return {};
    
    const apiHeaderTime = Math.floor(Date.now() / 1000);
    const sha1Hash = crypto.createHash('sha1');
    const data4Hash = API_KEY + API_SECRET + apiHeaderTime;
    sha1Hash.update(data4Hash);
    const hash4Header = sha1Hash.digest('hex');

    return {
      'X-Auth-Key': API_KEY,
      'X-Auth-Date': apiHeaderTime.toString(),
      'Authorization': hash4Header,
      'User-Agent': 'FUCKIT-Universal-Tool/1.0'
    };
  }

  async estimateAudioDuration(audioUrl) {
    try {
      const response = await fetch(audioUrl, { method: 'HEAD' });
      if (!response.ok) return null;
      
      const contentLength = response.headers.get('content-length');
      const contentType = response.headers.get('content-type');
      
      if (contentLength && contentType && contentType.includes('audio')) {
        const fileSizeKB = parseInt(contentLength) / 1024;
        let estimatedDuration = null;
        
        if (contentType.includes('mpeg') || contentType.includes('mp3')) {
          estimatedDuration = Math.round(fileSizeKB * 0.062);
        } else if (contentType.includes('m4a') || contentType.includes('mp4')) {
          estimatedDuration = Math.round(fileSizeKB * 0.055);
        } else if (contentType.includes('wav')) {
          estimatedDuration = Math.round(fileSizeKB * 0.006);
        }
        
        if (estimatedDuration && estimatedDuration >= 15 && estimatedDuration <= 1200) {
          return estimatedDuration;
        }
      }
      
      return null;
    } catch (error) {
      return null;
    }
  }

  async resolveFeedAndItem(feedGuid, itemGuid) {
    const headers = this.createAuthHeaders();
    if (!headers['X-Auth-Key']) {
      throw new Error('API credentials required for feed resolution');
    }

    try {
      // Get feed info
      const feedUrl = `https://api.podcastindex.org/api/1.0/podcasts/byguid?guid=${feedGuid}`;
      const feedResponse = await fetch(feedUrl, { headers });
      
      if (!feedResponse.ok) {
        throw new Error(`Feed lookup failed: ${feedResponse.status}`);
      }
      
      const feedData = await feedResponse.json();
      if (!feedData.feed) {
        throw new Error('Feed not found');
      }

      // Get episode info
      const episodeUrl = `https://api.podcastindex.org/api/1.0/episodes/byguid?guid=${itemGuid}&feedurl=${encodeURIComponent(feedData.feed.url)}`;
      const episodeResponse = await fetch(episodeUrl, { headers });
      
      if (!episodeResponse.ok) {
        throw new Error(`Episode lookup failed: ${episodeResponse.status}`);
      }
      
      const episodeData = await episodeResponse.json();
      if (!episodeData.episode) {
        throw new Error('Episode not found');
      }

      return {
        feed: feedData.feed,
        episode: episodeData.episode
      };
    } catch (error) {
      throw new Error(`Resolution failed: ${error.message}`);
    }
  }

  showHelp() {
    console.log(`
🛠️  Unified HGH track resolution tool

Usage: node scripts/hgh-resolver.js [command] [options]

Commands:
  analyze     Analyze tracks and generate reports
  resolve     Resolve feed/item metadata via Podcast Index API
  fix         Fix durations, titles, or GUIDs
  help        Show this help message

Examples:
  node scripts/hgh-resolver.js analyze --file=data/tracks.json
  node scripts/hgh-resolver.js resolve --feed-guid=abc123 --item-guid=def456
  node scripts/hgh-resolver.js fix --type=duration --file=data/tracks.json

Options:
  --file=PATH        Target file path
  --output=PATH      Output file path
  --feed-guid=GUID   Feed GUID for resolution
  --item-guid=GUID   Item GUID for resolution
  --type=TYPE        Fix type: duration|title|guid
  --limit=N          Process only N items
  --dry-run          Show what would be done without making changes
`);
  }
}

// Main execution
async function main() {
  const args = process.argv.slice(2);
  const tool = new UnifiedTool();

  if (args.length === 0 || args.includes('--help') || args.includes('-h')) {
    tool.showHelp();
    return;
  }

  const command = args[0];

  try {
    switch (command) {
      case 'analyze':
        console.log('📊 Analysis functionality consolidated here');
        break;
      case 'resolve':
        console.log('🔍 Resolution functionality consolidated here');
        break;
      case 'fix':
        console.log('🔧 Fix functionality consolidated here');
        break;
      default:
        console.error(`❌ Unknown command: ${command}`);
        tool.showHelp();
        process.exit(1);
    }
  } catch (error) {
    console.error(`❌ Error: ${error.message}`);
    process.exit(1);
  }
}

main().catch(console.error);
