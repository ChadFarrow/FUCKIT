generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Feed {
  id          String    @id @default(cuid())
  title       String
  description String?
  originalUrl String    @unique
  cdnUrl      String?
  type        String    @default("album")
  artist      String?
  image       String?
  language    String?
  category    String?
  explicit    Boolean   @default(false)
  priority    String    @default("normal")
  status      String    @default("active")
  lastFetched DateTime?
  lastError   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tracks      Track[]

  @@index([status, priority])
  @@index([type])
  @@index([lastFetched])
}

model Track {
  id               String    @id @default(cuid())
  guid             String?   @unique
  title            String
  subtitle         String?
  description      String?
  artist           String?
  album            String?
  audioUrl         String
  duration         Int?
  explicit         Boolean   @default(false)
  image            String?
  publishedAt      DateTime?
  itunesAuthor     String?
  itunesSummary    String?
  itunesImage      String?
  itunesDuration   String?
  itunesKeywords   String[]  @default([])
  itunesCategories String[]  @default([])
  v4vRecipient     String?
  v4vValue         Json?
  startTime        Float?
  endTime          Float?
  searchVector     String?
  feedId           String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  feed             Feed      @relation(fields: [feedId], references: [id], onDelete: Cascade)

  @@index([feedId])
  @@index([publishedAt])
  @@index([artist])
  @@index([album])
  @@index([title])
  @@index([guid])
}

model PlaylistTrack {
  id         String   @id @default(cuid())
  playlistId String
  trackId    String
  position   Int
  addedBy    String?
  addedAt    DateTime @default(now())

  @@unique([playlistId, trackId])
  @@index([playlistId, position])
}

model UserPlaylist {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  createdBy   String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([createdBy])
  @@index([isPublic])
}
