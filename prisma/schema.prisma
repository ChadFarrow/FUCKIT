// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Feed {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  originalUrl String   @unique
  cdnUrl      String?
  type        String   @default("album") // album, playlist, podcast
  artist      String?
  image       String?
  language    String?
  category    String?
  explicit    Boolean  @default(false)
  priority    String   @default("normal") // core, high, normal, low
  status      String   @default("active") // active, inactive, error
  lastFetched DateTime?
  lastError   String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  tracks      Track[]
  
  @@index([status, priority])
  @@index([type])
  @@index([lastFetched])
}

model Track {
  id            String   @id @default(cuid())
  guid          String?  @unique
  title         String
  subtitle      String?
  description   String?  @db.Text
  artist        String?
  album         String?
  audioUrl      String
  duration      Int?     // Duration in seconds
  explicit      Boolean  @default(false)
  image         String?
  publishedAt   DateTime?
  
  // iTunes specific fields
  itunesAuthor  String?
  itunesSummary String?  @db.Text
  itunesImage   String?
  itunesDuration String?
  itunesKeywords String[] @default([])
  itunesCategories String[] @default([])
  
  // V4V (Value for Value) fields
  v4vRecipient  String?
  v4vValue      Json?    // Stores Lightning payment info
  
  // Time segment fields (for podcast music segments)
  startTime     Float?   // Start time in seconds
  endTime       Float?   // End time in seconds
  
  // Search optimization
  searchVector  String?  @db.Text // For full-text search
  
  // Relations
  feed          Feed     @relation(fields: [feedId], references: [id], onDelete: Cascade)
  feedId        String
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([feedId])
  @@index([publishedAt])
  @@index([artist])
  @@index([album])
  @@index([title])
  @@index([guid])
}

model PlaylistTrack {
  id          String   @id @default(cuid())
  playlistId  String
  trackId     String
  position    Int
  addedBy     String?
  addedAt     DateTime @default(now())
  
  @@unique([playlistId, trackId])
  @@index([playlistId, position])
}

model UserPlaylist {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  isPublic    Boolean  @default(false)
  createdBy   String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([createdBy])
  @@index([isPublic])
}